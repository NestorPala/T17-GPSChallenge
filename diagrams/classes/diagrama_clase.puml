@startuml

class Jugador {
    - penalizaciones : int
    - cantidadMovimientos : int
    + puntajeTotal() : int
    + posicionDelJugador() : Posicion
    + moverse(Movimiento, Escenario)
}

class Movimiento {
    - x : int
    - y : int
    + obtenerX() : int
    + obtenerY() : int
}

class Escenario {
    - altura : int
    - anchura : int
    - matriz : Chocable
    + ponerUnElemento(Chocable,Posicion)
    + obtenerElementoEnEscenario(Posicion) : Chocable
    + estaDentroDelEscenario(Posicion) : Bool
}

class Posicion {
    - x : int
    - y : int
    + obtenerX() : int
    + obtenerY() : int
    + moverseDesdePosicionInicial(Movimiento)
}

class Pozo {
    +  obtenerPuntosDePenalizacion(Moto) : int
    +  obtenerPuntosDePenalizacion(Auto) : int
    +  obtenerPuntosDePenalizacion(Todoterreno) : int
}

class Vacio {
    +  obtenerPuntosDePenalizacion(Moto) : int
    +  obtenerPuntosDePenalizacion(Auto) : int
    +  obtenerPuntosDePenalizacion(Todoterreno) : int
}

class Piquete {
    +  obtenerPuntosDePenalizacion(Moto) : int
    +  obtenerPuntosDePenalizacion(Auto) : int
    +  obtenerPuntosDePenalizacion(Todoterreno) : int
}

class Auto {
    + chocar(Chocable) : int
}

class Moto {
    + chocar(Chocable) : int
}

class Todoterreno {
    - pozosEncontrados : int
    + chocar(Chocable) : int
}

interface IVehiculo {
    + chocar(Chocable) : int
}

interface Chocable {
    + obtenerPuntosDePenalizacion(Moto) : int
    + obtenerPuntosDePenalizacion(Auto) : int
    + obtenerPuntosDePenalizacion(Todoterreno) : int
}

Jugador -> IVehiculo
Movimiento <. Jugador

IVehiculo <|.. Auto
IVehiculo <|.. Moto
IVehiculo <|.. Todoterreno

Chocable <|.. Pozo
Chocable <|.. Vacio
Chocable <|.. Piquete

Jugador --> Posicion
Jugador .> Escenario

Escenario --> Chocable
Escenario ..> Posicion
Movimiento <.. Posicion
IVehiculo ..> Chocable

@enduml