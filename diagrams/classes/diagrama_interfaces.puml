@startuml
interface Chocable {
    + devolverEfecto(moto) : IEfecto
    + devolverEfecto(auto) : IEfecto
    + devolverEfecto(todoterreno) : IEfecto
}

class Pozo {
    +  devolverEfecto(moto) : IEfecto
    +  devolverEfecto(auto) : IEfecto
    +  devolverEfecto(todoterreno) : IEfecto
}

class Vacio {
    +  devolverEfecto(moto) : IEfecto
    +  devolverEfecto(auto) : IEfecto
    +  devolverEfecto(todoterreno) : IEfecto
}

class Piquete { 
    +  devolverEfecto(moto) : IEfecto
    +  devolverEfecto(auto) : IEfecto
    +  devolverEfecto(todoterreno) : IEfecto
}

class ControlPolicial {
    -  PROBABILIDAD_MOTO : Double
    -  PROBABILIDAD_AUTO : Double
    -  PROBABILIDAD_TODOTERRENO : Double
    -  PENALIZACION : int
    -  randomizador : Randomizer
    +  ControlPolicial(randomizer)
    +  devolverEfecto(moto) : IEfecto
    +  devolverEfecto(auto) : IEfecto
    +  devolverEfecto(todoterreno) : IEfecto
}

class SorpresaFavorable {
    +  devolverEfecto(moto) : IEfecto
    +  devolverEfecto(auto) : IEfecto
    +  devolverEfecto(todoterreno) : IEfecto
}

class SorpresaDesfavorable {
    +  devolverEfecto(moto) : IEfecto
    +  devolverEfecto(auto) : IEfecto
    +  devolverEfecto(todoterreno) : IEfecto
}

class SorpresaCambioVehiculo {
    +  devolverEfecto(moto) : IEfecto
    +  devolverEfecto(auto) : IEfecto
    +  devolverEfecto(todoterreno) : IEfecto
}

class Meta {
    +  devolverEfecto(moto) : IEfecto
    +  devolverEfecto(auto) : IEfecto
    +  devolverEfecto(todoterreno) : IEfecto
}

abstract class Vehiculo {
    + mover(unaDireccion, unaPosicion) : Posicion
    + chocar(chocable) : IEfecto
}

class Auto {
    + chocar(chocable) : Vehiculo
}

class Moto {
    + chocar(chocable) : Vehiculo
}

class Todoterreno {
    - pozosEncontrados : int
    + chocar(chocable) : Vehiculo
}

interface IEfecto {
    + aplicarEfecto(jugador)
}

class CambioDeVehiculo {
    - vehiculo: Vehiculo
    + CambioDeVehiculo(nuevoVehiculo)
    + aplicarEfecto(jugador)
}

class Penalizacion {
    - movimientos: int
    + Penalizacion(penalizacion: int)
    + aplicarEfecto(jugador)
}

class Porcentaje {
    - porcentaje: int
    + Porcentaje(porcentaje: int)
    + aplicarEfecto(jugador)
}

class Retroceso {
    + aplicarEfecto(jugador)
}

class FinDelJuego {
    + aplicarEfecto(jugador)
}

interface Randomizer {
    + random(probabilidad) : bool
}

class Randomizador {
    + random(probabilidad) : bool
}

Pozo ..|> Chocable
ControlPolicial ..|> Chocable
Piquete ..|> Chocable
Vacio ..|> Chocable
Chocable <|.. Meta


Chocable <|.. SorpresaFavorable
Chocable <|.. SorpresaDesfavorable
Chocable <|.. SorpresaCambioVehiculo

Vehiculo .> Chocable

Vehiculo <|-- Todoterreno
Vehiculo <|-- Auto
Moto -|> Vehiculo

Chocable .> IEfecto

IEfecto <|.. CambioDeVehiculo
IEfecto <|.. Penalizacion
IEfecto <|. Porcentaje
Retroceso ..|> IEfecto
FinDelJuego ..|> IEfecto

Randomizador .|> Randomizer
Randomizer <. ControlPolicial

@enduml